package TinhToan;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.print.attribute.standard.RequestingUserName;

public class Server {
		public static final String IP = "127.0.0.1";
		public static final int PORT = 2001;
		
		private ServerSocket serverSocket;
		
		public Server(String host, int port) {
			try {
				serverSocket = new ServerSocket(port);
				System.out.println("Server is running in port "+ port);
				while (true) {
					try {
						SocketThread socket = new SocketThread(serverSocket.accept());
						new Thread(socket).start();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			} catch (IOException ie) {
				Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ie);
			}
		}
		public static void main(String[] args) {
			new Server(IP, PORT);
		}
}
class SocketThread implements Runnable{
	private Socket s;
	public SocketThread(Socket s) {
		this.s = s;
	}
	@Override
	public void run() {
		try {
			DataInputStream dis = new DataInputStream(s.getInputStream());
			DataOutputStream dos = new DataOutputStream(s.getOutputStream());
			while (true) {
				String receive = dis.readUTF();
				String result = TinhBieuThuc.caculate(receive);
				dos.writeUTF(result);
			}
		} catch (IOException ex) {
			Logger.getLogger(SocketThread.class.getName()).log(Level.SEVERE, null, ex);
		}
	}
	
}
class TinhBieuThuc {
	static List<String> operator = new ArrayList<>(Arrays.asList("+", "-", "*", "/" , "sin", "cos", "tan"));
    static List<String> oneArgOperator = new ArrayList<>(Arrays.asList("sin", "cos", "tan"));
    static List<String> bracket = new ArrayList<>(Arrays.asList("(", ")"));
    static List<String> notOperand = new ArrayList<>(Arrays.asList("+", "-", "*", "/", "sin","cos", "tan", "(", ")"));
    static Stack<String> stack = new Stack<>();
    private static int priorityOf(String operator) {
        switch (operator) {
            case "+": case "-":
                return 0;
            case "*": case "/":
                return 1;
            case "sin": case "cos": case "tan":
                return 2;
        }
        return -1;
    }
    //return operand1 + operand2
    private static float calc(float operand1, float operand2, String operator) {
        switch (operator) {
            case "+":
                return operand1 + operand2;
            case "-":
                return operand1 - operand2;
            case "*":
                return operand1 * operand2;
            case "/":
                return operand1 / operand2;
        }
        return 1;
    }
 
    //return operator(operand)
    private static float calc(float operand, String operator) {
        switch (operator) {
            case "sin":
                return (float) Math.sin(operand);
            case "cos":
            	return (float) Math.cos(operand);
            case "tan":
            	return (float) Math.tan(operand);
        }
        return 1;
    }
    
}
